{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cookie Python Documentation","text":"<p> A Cookiecutter template for general python developers. Reommended for DevOps &amp; Data Science projects. The template follows a customizable project structure using cookiecutter as the template generator.</p> <p> Visit the repository</p> <p></p> <p></p>"},{"location":"#quick-start","title":"Quick start","text":"<p>Step 1 : Install the cookiecutter package, you can simply run the next command to install it.</p> <pre><code>pip install cookiecutter\n</code></pre> <p>Step 2: Run the cookiecutter command followed by the template repository URL.</p> <pre><code>python -m cookiecutter https://github.com/charlstown/py-template.git\n</code></pre> Don't clone this repository <p>You don't need to clone the template repository, cookiecutter will do that for you applying your own customization.</p>"},{"location":"#the-user-guide","title":"The user guide","text":"<p>If you want to simply run the project as a user you can visit the User Guide to learn how to get started, set up and use this code.</p>"},{"location":"#the-developer-guide","title":"The Developer guide","text":"<p>If you want to contribute to the project or to have a deeply understanding about how the project works, you can visit the Developer Guide.</p>"},{"location":"#documentation-contents","title":"Documentation contents","text":"<p>The documentation site has the following pages structure.</p> <pre><code>mkdocs.yml                      &lt;- The configuration file.\ndocs/                           &lt;- Documents directory\n\u251c\u2500\u2500 assets                      &lt;- Assets directory\n\u251c\u2500\u2500 index.md                    &lt;- [page] Home\n\u251c\u2500\u2500 references.md               &lt;- [page] References\n\u251c\u2500\u2500 user-guide                  &lt;- User guide submenu\n\u2502   \u251c\u2500\u2500 getting-started.md      &lt;- [page] Getting started\n\u2502   \u251c\u2500\u2500 set-up.md               &lt;- [page] Set up\n\u2502   \u251c\u2500\u2500 usage.md                &lt;- [page] Usage             \n\u2502   \u2514\u2500\u2500 ci-cd.md                &lt;- [page] CI/CD Github\n\u2514\u2500\u2500 dev-guide                   &lt;- Dev guide submenu\n    \u251c\u2500\u2500 contribute.md           &lt;- [page] Contribute\n    \u2514\u2500\u2500 document.md             &lt;- [page] Document\n</code></pre>"},{"location":"#contact-and-contributors","title":"Contact and contributors","text":"<p>Carlos Grande (@charlstown) - maintainer</p>"},{"location":"about/changelog/","title":"Changelog","text":""},{"location":"about/changelog/#release-contributors","title":"Release contributors","text":"<ul> <li>Carlos Grande (@charlstown)</li> </ul>"},{"location":"about/changelog/#version-010-2022-12-15","title":"Version 0.1.0 (2022-12-15)","text":"<p>This is the first documentation release of PyTemplate project.</p> <p>Features</p> <ul> <li>User guide to run the project as a user.</li> <li>Dev guide to contribute to the project or to have a deeply understanding about how it works.</li> <li>About section to document licensing, references and documentation versioning.</li> </ul> <p>Minor Changes</p> <ul> <li>Documentation files added to the main repository</li> </ul> <p>Bugfixes</p> <ul> <li>Config file with project name fixed to run the raw template</li> </ul>"},{"location":"about/external-links/","title":"External links","text":""},{"location":"about/external-links/#coockiecutter","title":"Coockiecutter","text":"<ul> <li>Cookiecutter Github</li> <li>Cookiecutter package</li> <li>Cookiecutter documentation</li> </ul>"},{"location":"about/external-links/#github","title":"Github","text":"<ul> <li>Github Actions documentation</li> <li>Github Actions marketplace</li> <li>Github Pages documentation</li> </ul>"},{"location":"about/external-links/#mkdocs","title":"Mkdocs","text":"<ul> <li>Mkdocs main page</li> <li>Mkdocs documentation</li> <li>Mkdocs introductory tutorial</li> <li>Material for Mkdocs</li> </ul>"},{"location":"about/license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2022  Carlos Grande</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"dev-guide/ci-cd/","title":"CI/CD with GitHub Actions","text":"<p>GitHub Actions is a continuous integration and continuous delivery (CI/CD) platform that helps you automate your software development workflows from within GitHub.</p> <p>You can review and access to predefined actions in the Github marketplace, or create custom actions for your own workflows.</p>"},{"location":"dev-guide/ci-cd/#how-to-use-github-actions","title":"How to use GitHub actions?","text":"<p>Create a <code>.github/workflows</code> folder in your repository and add a <code>.yml</code> file with the following content:</p> <pre><code>mkdir -p .github/workflows\ntouch .github/workflows/run-project.yml\ntouch .github/workflows/documentation.yml\n</code></pre> <p>In this example we have created two workflow files, the <code>run-project.yml</code> to test our project and the <code>documentation.yml</code> to deploy the project documentation from mkdocs.</p>"},{"location":"dev-guide/ci-cd/#actions-yaml-structure","title":"Actions YAML structure","text":"<p>The following yaml is a complete GitHub actions for create documentations (check out the comments for each component):</p> documentation.yaml<pre><code># Action to deploy the mkdocs documentation to the branch gh-pages.\nname: On Push Deploy Documentation # Name of the workflow\non: push # Events that trigger the workflow\n# push:\n#   branches:\n#     - main\n#     - wip-release\n\n# Jobs\njobs: # Jobs to run\ndeploy: # Name of the job\nname: deploy-documentation\nruns-on: ubuntu-latest # Operating system to run the job on\nsteps: # Steps to run\n- name: Checkout repo # Name of the step\nuses: actions/checkout@v2 # Action to run\n- name: Set up Python # Name of the step\nuses: actions/setup-python@v2 # Action to run\nwith: # Inputs for the action\npython-version: 3.7.13 # Version of Python to use\n- name: Caching # Name of the step\nuses: actions/cache@v2 # Action to run\nwith: # Inputs for the action\npath: $/{/{ env.pythonLocation /}/} # Path to cache\nkey: $/{/{ env.pythonLocation /}/}-$/{/{ hashFiles('setup.py') /}/}-$/{/{ hashFiles('requirements.txt') /}/} # Key to use for restoring and saving the cache\n- name: Install dependencies # Name of the step\nrun: | # Commands to run\npython -m pip install --upgrade pip\npip install mkdocs\npip install mkdocs-material\npip install pymdown-extensions\n- name: Deploy documentation # Name of the step\nrun: mkdocs gh-deploy --clean --force --verbose # Command to run\n</code></pre> <p></p>"},{"location":"dev-guide/contribute/","title":"Contribute","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. This guide will help you to contribute in different ways to this project.</p>"},{"location":"dev-guide/contribute/#contributor-values","title":"Contributor values","text":"<p>In the interest of fostering an open and welcoming environment, contributors and maintainers pledge to participate with a harassment-free experience for everyone\u2014regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>Examples of behaviors that contribute to creating a positive environment include:</p> <ul> <li>Use welcome and inclusive language.</li> <li>Be respectful of differing viewpoints and experiences.</li> <li>Gracefully accept constructive criticism.</li> <li>Foster what's best for the community.</li> <li>Show empathy for other community members.</li> </ul> <p>Decisions are made based on technical merit and consensus. As contributor aspire to treat everyone equally, and to value all contributions. For more information on best practices, please review the Code of Conduct.</p>"},{"location":"dev-guide/contribute/#types-of-contributions","title":"Types of Contributions","text":"<p>You can contribute to this project in many ways:</p>"},{"location":"dev-guide/contribute/#1-report-bugs","title":"1. Report Bugs","text":"<p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>If you can, provide detailed steps to reproduce the bug.</li> <li>If you don\u2019t have steps to reproduce the bug, just note your observations in as much detail as you can. Questions to start a discussion about the issue are welcome.</li> </ul>"},{"location":"dev-guide/contribute/#2-fix-bugs","title":"2. Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \u201cbug\u201d is open to whoever wants to implement it.</p>"},{"location":"dev-guide/contribute/#3-implement-features","title":"3. Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \u201cenhancement\u201d and \u201cplease-help\u201d is open to whoever wants to implement it.</p> <p>Please do not combine multiple feature enhancements into a single pull request.</p>"},{"location":"dev-guide/contribute/#4-write-documentation","title":"4. Write Documentation","text":"<p>This project could always use more documentation, whether as part of the official docs, in docstrings, or even on the web in blog posts, articles, and such.</p> <p>If you want to review your changes on the documentation locally, you can do:</p> <pre><code>pip install -r docs/requirements.txt\nmkdocs serve\n</code></pre> <p>This will compile the documentation, open it in your browser and start watching the files for changes, recompiling as you save.</p>"},{"location":"dev-guide/contribute/#5-submit-feedback","title":"5. Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/cookiecutter/cookiecutter/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> </ul> <p>Remember that this is a volunteer-driven project, and that contributions are welcome :)</p>"},{"location":"dev-guide/contribute/#set-up-the-code-for-local-development","title":"Set up the code for local development","text":"<p>-&gt; Step 1: Fork the repository on GitHub.</p> <p>-&gt; Step 2: Clone your fork locally.</p> <pre><code>git clone git@github.com:your_user_here/py-template.git\n</code></pre> <p>-&gt; Step 3: Install requirements.</p> <pre><code>cd py-template\npip install -m requirements.txt\n</code></pre> <p>-&gt; Step 4: Create your branch.</p> <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> <p>-&gt; Step 5: Commit your changes and push your branch to GitHub.</p> <pre><code>git add .\ngit commit -m \"Your detailed description of your changes.\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre> <p>-&gt; Step 6: Submit a pull request through the GitHub website.</p> <p>Go to the pull request section in the repository and select the <code>New pull request</code> button.</p>"},{"location":"dev-guide/contribute/#contributor-guidelines","title":"Contributor Guidelines","text":""},{"location":"dev-guide/contribute/#1-open-issue-guidelines","title":"1. Open Issue Guidelines","text":"<p>Before opening an issue, check it meets these guidelines:</p> <ul> <li>Add a description of the bug, feature request, feedback, etc.</li> <li>Add a log, output or Screenshot if possible.</li> <li>(optional) Add some tests or previous research if you did it.</li> <li>Add version information from your OS, code language, libraries, etc.</li> </ul>"},{"location":"dev-guide/contribute/#2-pull-request-guidelines","title":"2. Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ul> <li>The pull request should be contained: if it\u2019s too big consider splitting it into smaller pull requests.</li> <li>If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md.</li> <li>The pull request must pass all CI/CD jobs before being ready for review.</li> <li>If one CI/CD job is failing for unrelated reasons you may want to create another PR to fix that first.</li> </ul> <p>To document your pull request you can follow the next example:</p> <pre><code># Preamble\n\nThis is the first release of the archetype PyTemplate v1.0.0. A cookiecutter archetype to generate a clean base to begin developing data engineer and data science projects.\n\nThe current stable state of the project is released knowing there are a many changes is coming and things to improve.\nFuture releases will happen more frequently. Stay tuned.\n\n\n# Features\n\n- CD added with a python-push.yml and GitHub actions\n- Logger more detailed\n- README.md very detailed\n\n# Minor Changes\n\n- Documentation files added to the main repository\n\n\n# Bugfixes\n\n- Config file with project name fixed to run the raw template\n\n\n# Release collaborators\n\n@charlstown\n</code></pre>"},{"location":"dev-guide/contribute/#3-coding-standards","title":"3. Coding Standards","text":"<ul> <li>Use the PEP8 style guide</li> <li>Functions should be over classes except in tests</li> <li> <p>Use double quotes around strings that are used for interpolation or that are natural language messages.</p> <pre><code>message = \"This is a string\"\n</code></pre> </li> <li> <p>Use single quotes for small symbol-like strings (but break the rules if the strings contain quotes).</p> <pre><code>my_dict = {'MyKey': \"This is an example\"} \n</code></pre> </li> <li> <p>Use triple double quotes for docstrings and add the input and output parameters to it.</p> <pre><code>class my_class:\n\"\"\"\nClass description\n\"\"\"\n    def my_method(key: str, items: dict) -&gt; int:\n\"\"\"\n        Return the element from a dictionary given a key\n        :param key: key to be selected\n        :param items: dictionary of items\n        :return: element of the items with the provided key\n        \"\"\"\n        return items[key]\n</code></pre> </li> <li> <p>Use raw string literals for regular expressions even if they aren't needed.</p> <pre><code>re.search(r\"(?i)(arr|avast|yohoho)!\", message)\n</code></pre> <p></p> </li> </ul>"},{"location":"user-guide/getting-started/","title":"Getting started","text":""},{"location":"user-guide/getting-started/#1-what-is-cookiecutter","title":"1. What is cookiecutter","text":"<p>A command-line utility that creates projects from cookiecutters (project templates), e.g. creating a Python package project from a Python package project template.</p> <p>Visit these links to learn more about cookiecutter. - Documentation: https://cookiecutter.readthedocs.io/ - GitHub: https://github.com/cookiecutter/cookiecutter</p>"},{"location":"user-guide/getting-started/#2-installation","title":"2. Installation","text":"<p>To create a new project from the template you need to install cookiecutter and follow these instructions.</p>"},{"location":"user-guide/getting-started/#21-cookiecutter-installation","title":"2.1 Cookiecutter installation","text":"<p>Installing cookiecutter package on Ubuntu is very easy, you can simply run the next command to install it.</p> <pre><code>pip install cookiecutter\n</code></pre> <p>Visit the link to the cookiecutter documentation to learn more about the installation.</p> Install cookiecutter in a virtual environment <p>It is recommended to create a virtual environment and, install the cookiecutter library inside this environment.</p>"},{"location":"user-guide/getting-started/#22-cookie-python-installation","title":"2.2 Cookie Python installation","text":"<p>To generate a custom project from the template, follow these steps:</p> <ul> <li> <p>Step 1. Create the project:</p> <p>Navigate to the path where you desire to generate the project folder. <pre><code>cd /my-projects\n</code></pre></p> <p>There is no need to create a specific folder for your project, cookiecutter will create the repository folder for you.</p> </li> <li> <p>Step2. Select the template</p> <p>Run the cookiecutter command followed by the template repository URL. <pre><code>python -m cookiecutter https://github.com/charlstown/py-template.git\n</code></pre></p> </li> <li> <p>Step 3. Customize the template:</p> <p>Fill out the form in the console to customize the template and the project will be generated at the end.</p> <p></p> </li> </ul> <p>You should see a new folder with the repository name you gave as input (<code>my-python-project</code>). Congrats!  You finally installed your template to start coding your project!</p>"},{"location":"user-guide/getting-started/#23-adding-the-project-to-a-new-github-repository","title":"2.3 Adding the project to a new Github repository","text":"<ul> <li> <p>Step 1. Create a new repository in github:</p> <p>Create the new repository and make sure you give it the same name of the project folder, in our case <code>my-python-project</code>.</p> <p>Warning</p> <p>Don't add any predefined file from github in the new repository, all the files are included in the local project folder.</p> </li> <li> <p>Step 2. Push the local repository:</p> <pre><code>git remote add origin https://github.com/charlstown/my-python-project.git\ngit branch -M main\ngit push -u origin main\n</code></pre> Note <p>After pushing the project the github action <code>On Push Deploy Documentation</code> will create a new branch called <code>gh-pages</code>. This branch contains the documentation files in html ready to be published in Github Pages.</p> </li> </ul>"},{"location":"user-guide/getting-started/#24-deploying-the-documentation-in-github","title":"2.4 Deploying the documentation in Github","text":"<p>Deploy your documentation in Github pages is so easy, you only need to set the pages configuration pointing at the <code>gh-pages</code> branch generated by our github action <code>On Push Deploy Documentation</code>.</p> <p>Warning</p> <p>To deploy the documentation in Github Pages the repository must be a public repository.</p> <ol> <li>Go to the repository settings.</li> <li>Select <code>Pages</code> at the settings menu under the <code>code and automation</code> section.</li> <li> <p>Make sure pages is enable and select <code>gh-pages</code> as the site branch under <code>Build and deployment</code> section.</p> <p></p> <p>Your site should be live at: https://charlstown.github.io/my-python-project/</p> </li> </ol> <p>Visit the Set Up section to learn more about the template generation and the input parameters.</p> <p></p>"},{"location":"user-guide/help/","title":"Help Wanted","text":"<p>This repository does provide the required installation instructions to run it by your own. Altough feel free to contact me on the following channels to get support.</p> <p>If you think your question is related with a bug or some type of malfunction you can open an issue and follow the contribute section on the dev-guide to understand how to do it.</p> <p>If you simply want to reach me you can visit my personal LinkedIn profile and send me a message.</p> <p>Finally you can directly contact me at my personal site carlosgrande.me if you have any doubts.</p>"},{"location":"user-guide/set-up/","title":"Set Up","text":"<p>This section helps to understand the values involved to customize the project and the files generated from the cookiecutter template.</p>"},{"location":"user-guide/set-up/#project-customization","title":"Project customization","text":"<p>During the template installation, you will be asked for some cookiecutter variables to customize your project. You can read more about about these parameters in the next table.</p> Input parameter Default value Description project_name <code>\"My Python Project\"</code> The name of the project as String (you can add spaces and dashes). project_description <code>\"Description in less than 20 words.\"</code> Description of the project in less than 20 words if possible. author <code>\"Carlos Grande\"</code> Name of the author of the project. github_user <code>\"charlstown\"</code> The Github username of the author. repository_name <code>\"{{ project_name }}\"</code> It's by default the name of the project in lowercase and dashed. package_name <code>\"{{ project_name }}\"</code> It's by default the name of the project in lowercase and underscored. repository_url <code>\"https://github.com/{{ github_user }}/{{ repository_name }}\"</code> The github url of the future repository. maintainer <code>\"{{author}}\"</code> The maintainer of the project. license <code>[\"MIT\", \"Apache 2.0\", \"GNU General Public License\", \"Custom\"]</code> The name of the license version <code>\"0.1.0\"</code> Version of the project to be created. env_name <code>\"{{ repository_name }}\"</code> Name of the virtual environment path of the project. python_version <code>\"3.10\"</code> Python version you ar working on."},{"location":"user-guide/set-up/#project-contents","title":"Project contents","text":"<p>After the template installation you will have a directory with your project customized and the files ready to start coding.</p> <p>The Project directory will have the next structure following the packaging.python.org rules.</p> <pre><code># Project initial contents\nrepository_name\n\u251c\u2500\u2500 src/package_name            &lt;- Folder with the package code files.\n\u2502   \u251c\u2500\u2500 __init__.py             &lt;- Constructor file.\n\u2502   \u251c\u2500\u2500 main.py                 &lt;- File with the source code.\n\u2502   \u2514\u2500\u2500 helpers.py              &lt;- Example class with helpers methods.\n\u251c\u2500\u2500 data                        &lt;- Data used for the project.\n\u2502   \u251c\u2500\u2500 config.yaml             &lt;- Configuration file.\n\u2502   \u2514\u2500\u2500 logs                    &lt;- Logs folder.\n\u2502       \u2514\u2500\u2500 file.log            &lt;- Logs file from the project.\n\u251c\u2500\u2500 docs                        &lt;- Documentation folder.\n\u2502   \u2514\u2500\u2500 assets                  &lt;- Folder for images and media.\n\u251c\u2500\u2500 tests                       &lt;- Folder for test files.\n\u2502   \u251c\u2500\u2500 __init__.py             &lt;- Constructor file.\n\u2502   \u2514\u2500\u2500 test_run.py             &lt;- Test example file.\n\u251c\u2500\u2500 Dockerfile                  &lt;- Dockerfile to deploy the project.\n\u251c\u2500\u2500 code_of_conduct.md          &lt;- Code of conduct file.\n\u251c\u2500\u2500 LICENSE                     &lt;- LICENSE file.\n\u251c\u2500\u2500 README.md                   &lt;- README file.\n\u2514\u2500\u2500 requirements.txt            &lt;- Requirements file.\n</code></pre> <p>Visit the Usage section to learn how your new project customized from the cookicutter template works.</p>"},{"location":"user-guide/usage/","title":"Usage","text":"<p>Once the template is applied, the base code directory will have the next structure following the packaging.python.org rules.</p> Base code generated from the template<pre><code>my-python-project               &lt;- Custom template project directory\n\u251c\u2500\u2500 src                         &lt;- Folder with the source files and packages.\n\u2502   \u2514\u2500\u2500 my_python_project       &lt;- Folder with the package code files.\n\u2502       \u251c\u2500\u2500 __init__.py         &lt;- Constructor file.\n\u2502       \u251c\u2500\u2500 main.py             &lt;- File with the source code.\n\u2502       \u2514\u2500\u2500 helpers.py          &lt;- Example class with helpers methods.\n\u251c\u2500\u2500 data                        &lt;- Data used for the project.\n\u2502   \u251c\u2500\u2500 config.yaml             &lt;- Configuration file.\n\u2502   \u2514\u2500\u2500 logs                    &lt;- Logs folder.\n\u2502       \u2514\u2500\u2500 file.log            &lt;- Logs file from the project.\n\u251c requirements.txt              &lt;- Requirements file.\n...\n</code></pre>"},{"location":"user-guide/usage/#running-the-base-code","title":"Running the base code","text":"<p>Before starting to develop your own code you can run the base code by following the next steps.</p> <ul> <li> <p>Step 1: Create your virtual environment(optional)</p> <p>This step is optional but recommended, create your virtual environment for this project by the name you typed when generating the custom template. By default is my-python-project (env_name).</p> </li> <li> <p>Step 2: Install the requirements</p> <p>Install the requirements to run the project in the virtual environment by the following command. The only library preconfigured in the requirements is PyYAML, required to read the configuration file.</p> <pre><code>pip install -r requirements.txt\n</code></pre> </li> <li> <p>Step 3: run the main.py file</p> <p>Let's start by running the main.py file in debug mode.</p> <pre><code>cd my-python-project\npython src/my_python_project/main.py -l debug </code></pre> Running the code with arguments <p>When running the code you have the following flags to modify the behaviour of the program.</p> <pre><code>python src/{{ cookiecutter.package_name }}/main.py [flags]\n</code></pre> <p>Options:</p> <p><code>-c &lt;config file path&gt;</code>, <code>--config &lt;config file path&gt;</code> Add the config file path after this flag</p> <p><code>-l ['debug', 'info', 'warning']</code>, <code>--log ['debug', 'info', 'warning']</code> Set up de level of the logs promted. By default <code>info</code></p> <p>After running the command you should see an output showing the initial arguments and the execution of the public and private methods from the Helpers class.</p> output<pre><code>2022-12-11 23:49:13 [DEBUG] main.py - __init__ (L50): \n2022-12-11 23:49:13 [DEBUG] main.py - __init__ (L51): Initial args: \n2022-12-11 23:49:13 [DEBUG] main.py - __init__ (L53): &gt;&gt; config: data/config.yaml\n2022-12-11 23:49:13 [DEBUG] main.py - __init__ (L53): &gt;&gt; log: ['debug']\n2022-12-11 23:49:13 [DEBUG] main.py - __init__ (L53): &gt;&gt; test: False\n2022-12-11 23:49:13 [DEBUG] main.py - __init__ (L54): \n\n2022-12-11 23:49:13 [INFO] main.py - run (L101): [Initializing my-python-project]\n2022-12-11 23:49:13 [INFO] helpers.py - public_method (L40): This \"public_method\" is a method from Helpers.\n2022-12-11 23:49:13 [INFO] helpers.py - _private_method (L33): This \"_private_method\" is a method from Helpers.\n2022-12-11 23:49:13 [INFO] helpers.py - public_method (L42): This \"Hello World\" is a global variable.\n2022-12-11 23:49:13 [INFO] main.py - run (L110): [Exiting my-python-project app.Total elapsed time: 00:00:00.]\n</code></pre> </li> </ul>"},{"location":"user-guide/usage/#understanding-the-base-code","title":"Understanding the base code","text":"<p>To get a better understanding of the base code from the template, lets review some important files from the project generated.</p>"},{"location":"user-guide/usage/#1-the-mainpy-file","title":"1. The main.py file","text":"<p>It is the class acting as an orchestrator of the whole code.</p> <p>The main.py file is made of one class called App and, the following three methods.</p> Methods Description <code>\\__init__</code> Constructor method to read the configuration parameters, generate the instances from modules and declare the global variables. <code>_get_logger</code> Method to generate the logger used in the project. <code>run</code> Main method to run the whole app and manage all calls."},{"location":"user-guide/usage/#11-the-__init__-method","title":"1.1 The __init__ method","text":"<p>The __init__ method is in charge of declaring the configuration values, define the global variables and, generate the instances from other modules like the helpers class.</p> main.py<pre><code>def __init__(self, args: argparse.Namespace):\n\"\"\"\n    Constructor method to read the configuration parameters, generate the instances from modules and declare the global variables\n    :param args: arguments from the command input flags\n    \"\"\"\n    # Argument variables\n    dir_config = args.config\n    test = args.test\n    arg_level = args.log[0]\n\n    # Reading the config json file\n    yaml_file = open(dir_config, 'r')\n    config = yaml.safe_load(yaml_file)\n\n    # Getting logger\n    logger = self._get_logger(level=arg_level)\n\n    # Logging argument variables\n    logger.debug('')\n    logger.debug(\"Initial args: \")\n    for k, v in vars(args).items():\n        logger.debug(f\"&gt;&gt; {k}: {v}\")\n    logger.debug(\"\\n\")\n\n    # Global variables\n    self.config = config\n    self.log = logger\n\n    # Global instances\n    self.helpers = Helpers(logger=logger, config=config)\n</code></pre>"},{"location":"user-guide/usage/#12-the-run-method","title":"1.2 The run method","text":"<p>The run method acts as the runner of the whole script here is where everything related with the app happens. The run method is set to start developing your code in the lines 94 and 95.</p> main.py<pre><code>def run(self):\n\"\"\"\n    Main method to run the whole app and manage all calls.\n    :return: None\n    \"\"\"\n    # Initializing the app\n    start_app = time.time()\n    self.log.info(f\"\\033[1m[Initializing {self.config['project_name']}]\\033[0m\")\n\n# &gt;&gt;&gt; Start your code here &lt;&lt;&lt;\nself.helpers.public_method()\n# Exiting the app\n    end_app = time.time()\n    elapsed_time = end_app - start_app\n    str_elapsed_time = time.strftime('%H:%M:%S.', time.gmtime(elapsed_time))\n    self.log.info(f\"\\033[1m[Exiting {self.config['project_name']} app.\"\n                    f\"Total elapsed time: {str_elapsed_time}]\\033[0m\")\n    sys.exit(0)\n</code></pre>"},{"location":"user-guide/usage/#2-the-helperspy-file","title":"2. The helpers.py file","text":"<p>The <code>helpers.py</code> file located at src/package_name directory contains an example class template as a guide to call this class and others from the <code>main.py</code> file.</p> <p>When instantiating a class in main.py (class App) we should alway pass the following input parameters:</p> <ul> <li>logger: logger object defined in the main file to promt output messages.</li> <li>config: configuration parameters from the configuration file <code>config.yaml</code>.</li> </ul> main.py (instanced class from helpers.py)<pre><code># Global instances\nself.example_class = Helpers(logger=logger, config=config)\n</code></pre>"},{"location":"user-guide/usage/#21-the-__init__-method","title":"2.1 The __init__ method","text":"<p>The __init__ method is the constructor method from the class Helpers. This method creates an instance from its class and, declare initial parameters and global variables.</p> helpers.py<pre><code>    def __init__(self, logger: logging.Logger, config: dict):\n        \"\"\"\n        Constructor method to create an instance from the class with initial arguments and\n        global variables\n        :param logger: logger defined in the main file\n        :param config: configuration parameters\n        \"\"\"\n        # Global variables\n        self.logger = logger\n        self.config = config\n        self.example_global_variable = \"Hello World\"\n</code></pre>"},{"location":"user-guide/usage/#3-the-configuration-file","title":"3. The configuration file","text":"<p>The configuration file is located in <code>/data/config.yaml</code> this file should contain all the configuration parameters for your code.</p> config.yaml<pre><code># Configuration parameters\nproject_name: \"{{cookiecutter.repository_name}}\"\npath_logs: data/logs/file.log\n\n# &gt;&gt;&gt; Add your configuration parameters here &lt;&lt;&lt;\n</code></pre> Mockup configuration parameters <p>There are some mock up configuration parameters as a type reminder. It is recommended to delete these parameters before releasing the code. These parameters don't affect the behaviour of the code. config.yaml<pre><code># \u2304\u2304\u2304 Example. Not actual parameters, remove before code. \u2304\u2304\u2304\nexample_string: This is an string\nexample_integer: 2077\nexample_float: 2.077\nexample_boolean: True\nexample_none: None\nexample_list:\n- A\n- B\n- C\nexample_dictionary:\nkey_a: value_a\nkey_b: value_b\nexample_set: !!set\n? a\n? b\n? 1\n? 2\nexample_anchor: &amp;my_anchor data_to_duplicate\nexample_run_anchor: *my_anchor\n# \u2303\u2303\u2303 Example. Not actual parameters, remove before code. \u2303\u2303\u2303\n</code></pre></p>"},{"location":"user-guide/usage/#4-the-logs-file","title":"4. The logs file","text":"<p>The logs file is an empty located at '/data/logs/file.log'. This file acts as a history of all the logs generated from the executions. You can change the behaviour of these logs in the <code>main.py</code> file at the _get_logger method.</p> main.py<pre><code>def _get_logger(self, level: str) -&gt; logging.Logger:\n\"\"\"\n    Method to generate the logger used in the project\n    :param level: the level of the logs to output\n    :return: the custom logger\n    \"\"\"\n    # Setting up the output level\n    levels = {'debug': logging.DEBUG,\n                'info': logging.INFO,\n                'warning': logging.WARNING}\n    set_level = levels[level]\n\n    # Setting up the logger\n    set_log_format = '%(asctime)s [%(levelname)s] %(filename)s - %(funcName)s (L%(lineno)s): %(message)s'\n    set_date_format = '%Y-%m-%d %H:%M:%S'\n    logging.basicConfig(level=set_level,\n                        format=set_log_format,\n                        datefmt=set_date_format)\n    my_logger = logging.getLogger(__name__)\n\n    # Create a file log handler\nfile_handler = logging.FileHandler(self.config['path_logs'])\nfile_handler.setLevel(logging.DEBUG)\nf_format = logging.Formatter(set_log_format)\nfile_handler.setFormatter(f_format)\n# Add handlers to the logger\nmy_logger.addHandler(file_handler)\nreturn my_logger\n</code></pre> <p></p>"}]}